t = c("a","b", "c","d","e","f","g")  #character vector called t
t[1]
t[1] #single bracket operator extracts the first element
t[2] #second element of t
t[1:4] #extracting a sequence of elements 1 through to 4
t[t>"a"] #logical index
s = t>a #a true/false vector that tells which elements of vector t are>"a"
s
s = t>"a" #a true/false vector that tells which elements of vector t are>"a"
s
t[s]
r = matrix[1:6,2,3] # r is a matrix with values from 1 to 6 and 2 rows and 3 columns
r = matrix(1:6,2,3) # r is a matrix with values from 1 to 6 and 2 rows and 3 columns
r[1,2] # subset the element in the 1st row, 2d column
r[1, ]
r[1, ] #returns a vector with
r[1, , drop = flase]
r[1, , drop = false]
r[1, ,drop = FALSE] #returns a matrix
x = list(foo = 1:4, bar = 0.6)
x[1] #we can also subset lists
x$bar #this returns the element that is associated with the name "bar"
x[["bar"]]
x["bar"] #returns a list with the element "bar" in it
x[c(1:2)]
name = "foo"
x[[name]] #computed index for foo
x$name
x[[c(1,3)]]
x[[c(1,3)]] #extracts the third element of the first element ( a list)
x[[1]][[3]] #gives the same result
y = list(aardvark = 1:5)
y$a
y$a #Partial matching is ok with $
y[["a"]] #doesn't work
y[["a", exact = FALSE]] #this works
z = c(1,2,NA,4,NA,6)
bad = is.NA(z)                      #Create a boolean called "bad" that includes all NA elements in z
bad = is.na(z)                      #Create a boolean called "bad" that includes all NA elements in z
z[!bad]                             #Then create a subset of z that is not NA
m = c(1,2,NA,4,NA,7)
n = c(5,6,NA,NA,7,8)
n = c(5,6,NA,NA,7,8)                #What if we want to subset from multiple objects?
good = complete.cases (m,n)
good
good                                #Now this vector returns
m[good]
n[good]
read.table, read.csv
read.table
help(read.table)
